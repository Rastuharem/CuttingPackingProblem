using System;
using System.Collections.Generic;

namespace Cutter
{
    class EvolutionAlgorithm : AAlgorithm
    {
        private static int PopulationCount = 100; // Number of individuals in population
        private static int NumberOfRepeats = 5; // Number of best solution repeats: algorithm stops when counter reaches it
        private static int NumberOfChildren = PopulationCount; // Number of children generated by parents
        private static double MutationProbability = 0.5; // Probability of mutations in new child

        public IReproductor Reproductor {get; set;}
        public ICrossover Crossover { get; set; }
        public IMutator Mutator { get; set; }
        public ISelector Selector { get; set; }

        public EvolutionAlgorithm(List<IItem> sample, IDecoder decoder, IPrinter printer = null) : base(sample, decoder, printer)
        {
            Reproductor = new FortuneWheelReproductor();
            Crossover = new FiftyFiftyCrossover();
            Mutator = new SymmetryMutator(MutationProbability);
            Selector = new TournamentSelector();
        }

        public override void Solve()
        {
            Printer.Clear();
            Printer.Print("Algorithm will use:");
            Printer.Print("     Decoder - " + Decoder.ToString());
            Printer.Print("");
            Printer.Print("Evolution algorithm begins!");
            Printer.Print("Global Parameters:");
            Printer.Print("     Population size = " + PopulationCount);
            Printer.Print("     Number of children = " + NumberOfChildren);
            Printer.Print("     Number of repeats to stop: " + NumberOfRepeats);
            Printer.Print("     Probability of mutations: " + MutationProbability);
            Printer.Print("Local Parameters:");
            Printer.Print("     Reproductor - " + Reproductor.ToString());
            Printer.Print("     Crossover - " + Crossover.ToString());
            Printer.Print("     Mutator - " + Mutator.ToString());
            Printer.Print("     Selector - " + Selector.ToString());
            Printer.Print("------------------------------------------------------------");

            StartTimeCount();

            // Creating first population
            List<Codestring> CurrentPopulation = CreateFirstPopulation();
            Codestring answ = FindBestIndividual(CurrentPopulation);

            int counterOfRepeats = 0;

            while (counterOfRepeats < NumberOfRepeats)
            {
                // Reproduction
                for (int i = 0; i < NumberOfChildren; i++)
                {
                    Codestring FirstParent, SecondParent;
                    Reproductor.MakeReproduction(CurrentPopulation, out FirstParent, out SecondParent);
                    // Crossover
                    Codestring Child;
                    Crossover.MakeCrossover(FirstParent, SecondParent, out Child);
                    // Mutation
                    Mutator.MakeMutation(Child, out Child);

                    CurrentPopulation.Add(Child);
                }

                // Selection
                Selector.MakeSelection(CurrentPopulation, out CurrentPopulation);

                Codestring BestIndividual = FindBestIndividual(CurrentPopulation);
                if (BestIndividual.Criterium > answ.Criterium)
                {
                    answ = BestIndividual;
                }
                else
                {
                    if (BestIndividual.Criterium == answ.Criterium)
                    {
                        counterOfRepeats++;
                    }
                }
            }

            BestSolution = answ.GetVisualItemsList();
            BestCriterium = answ.GetVisualCriterium();

            StopTimeCount();

            Printer.Print("Algorithm done in " + myStopWatch.Elapsed.ToString());
            Printer.Print("Solution is: ");
            Printer.Print(BestCriterium.ToString());
        }


        private List<Codestring> CreateFirstPopulation()
        {
            List<Codestring> FirstPopulation = new List<Codestring>();
            for (int i = 0; i < PopulationCount; i++)
            {
                FirstPopulation.Add(GenerateRandCodestring());
            }

            return FirstPopulation;
        }
        private Codestring FindBestIndividual(List<Codestring> population)
        {
            Codestring bestIndividual = population[0];

            for (int i = 0; i < population.Count; i++)
            {
                if (bestIndividual.Criterium > population[i].Criterium)
                {
                    bestIndividual = population[i];
                }
            }

            return bestIndividual;
        }
        private Codestring GenerateRandCodestring()
        {
            Random rnd = new Random();
            List<int> indexes = new List<int>();
            List<int> codestring = new List<int>();
            for (int i = 0; i < Sample.Count; i++)
            {
                indexes.Add(i);
            }

            for (int i = 0; i < Sample.Count; i++)
            {
                int randInd = rnd.Next(0, indexes.Count);
                codestring.Add(indexes[randInd]);
                indexes.RemoveAt(randInd);
            }
            return new Codestring(codestring, Sample, Decoder);
        }

        public static int GetPopulationCount() { return PopulationCount; }
    }
}